export { tokenizeInterval as tokenize } from "@tonaljs/tonal";
import { IntervalName } from "@tonaljs/tonal";
/**
 * Get the natural list of names
 */
export declare function names(): IntervalName[];
/**
 * Get the simplified version of an interval.
 *
 * @function
 * @param {string} interval - the interval to simplify
 * @return {string} the simplified interval
 *
 * @example
 * simplify("9M") // => "2M"
 * ["8P", "9M", "10M", "11P", "12P", "13M", "14M", "15P"].map(simplify)
 * // => [ "8P", "2M", "3M", "4P", "5P", "6M", "7M", "8P" ]
 * simplify("2M") // => "2M"
 * simplify("-2M") // => "7m"
 */
export declare function simplify(name: IntervalName): IntervalName;
/**
 * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)
 * of an interval.
 *
 * @function
 * @param {string} interval - the interval to invert in interval shorthand
 * notation or interval array notation
 * @return {string} the inverted interval
 *
 * @example
 * invert("3m") // => "6M"
 * invert("2M") // => "7m"
 */
export declare function invert(name: IntervalName): IntervalName;
/**
 * Get interval name from semitones number. Since there are several interval
 * names for the same number, the name it"s arbitraty, but deterministic.
 *
 * @param {Integer} num - the number of semitones (can be negative)
 * @return {string} the interval name
 * @example
 * fromSemitones(7) // => "5P"
 * fromSemitones(-7) // => "-5P"
 */
export declare function fromSemitones(semitones: number): IntervalName;
/**
 * Adds two intervals
 *
 * @function
 * @param {string} interval1
 * @param {string} interval2
 * @return {string} the added interval name
 * @example
 * import { add } from "@tonaljs/tonal"
 * add("3m", "5P") // => "7m"
 */
export declare const add: (a: string, b: string) => string | undefined;
/**
 * Subtracts two intervals
 *
 * @function
 * @param {string} minuendInterval
 * @param {string} subtrahendInterval
 * @return {string} the substracted interval name
 * @example
 * import { substract } from '@tonaljs/tonal'
 * substract('5P', '3M') // => '3m'
 * substract('3M', '5P') // => '-3m'
 */
export declare const substract: (a: string, b: string) => string | undefined;
