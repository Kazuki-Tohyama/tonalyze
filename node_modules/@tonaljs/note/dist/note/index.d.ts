import { NoteName, Pitch } from "@tonaljs/tonal";
export { tokenizeNote as tokenize } from "@tonaljs/tonal";
/**
 * Simplify a note
 *
 * @function
 * @param {string} note - the note to be simplified
 * - sameAccType: default true. Use same kind of accidentals that source
 * @return {string} the simplfied note or '' if not valid note
 * @example
 * simplify("C##") // => "D"
 * simplify("C###") // => "D#"
 * simplify("C###")
 * simplify("B#4") // => "C5"
 */
export declare const simplify: (noteName: string | Pitch) => string;
/**
 * Get enharmonic of a note
 *
 * @function
 * @param {string} note
 * @return {string} the enhramonic note or '' if not valid note
 * @example
 * Note.enharmonic("Db") // => "C#"
 * Note.enhramonic("C") // => "C"
 */
export declare const enharmonic: (noteName: string | Pitch) => string;
/**
 * Transpose by an interval
 * @function
 * @param {string} interval
 * @return {function} a function that transposes by the given interval
 * @example
 * ["C", "D", "E"].map(transposeBy("5P"));
 * // => ["G", "A", "B"]
 */
export declare const transposeBy: (interval: string) => (note: string) => string;
/**
 * Transpose from a note
 * @function
 * @param {string} note
 * @return {function}  a function that transposes the the note by an interval
 * ["1P", "3M", "5P"].map(transposeFrom("C"));
 * // => ["C", "E", "G"]
 */
export declare const transposeFrom: (note: string) => (interval: string) => string;
/**
 * Transpose a note by a number of perfect fifths.
 *
 * @function
 * @param {string} note - the note name
 * @param {number} fifhts - the number of fifths
 * @return {string} the transposed note name
 *
 * @example
 * import { transposeFifths } from "@tonaljs/note"
 * transposeFifths("G4", 1) // => "D"
 * [0, 1, 2, 3, 4].map(fifths => transposeFifths("C", fifths)) // => ["C", "G", "D", "A", "E"]
 */
export declare function transposeFifths(noteName: NoteName, fifths: number): NoteName;
